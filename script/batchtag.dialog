#!/usr/bin/perl
# batch.dialog
#  TagTools for Linux v0.43a
#  V.Korol 2011
############################## 

use Encode;
use utf8;

use TagTools qw(:DEFAULT $VERSION $DEFAULT_CHARSET $COOKIE_FILE $DEBUG_ON $DEBUG_FILE);

use UI::Dialog::Backend::CDialog;
use Audio::TagLib;


######################################################################################
sub displayHelp {
 print "batchtag.dialog v$VERSION by V.Korol (vakorol@mail.ru) -\n";
 print "A script for dialog-based batch tag creation. Allows to fill several tag fields for\n";
 print "a given list of audio files with input strings, or extract tags from filenames, using\n";
 print "a specified format.\n";
 print "The following variables in the format string are allowed:\n";
 print "%a - artist, %t - title, %b - album, %n - track no.,\n";
 print "%y - year, %c - comment, %u - useless.\n";
 print " Usage:  batchtag.dialog [-d] file1 file2..\n";
 print "     -d         : output debug messages to $DEBUG_FILE.\n";
 exit;
}


######################################################################################

my $arg_num = 0;

$file = $ARGV[0];
if ($file eq "-d"){	# -d option: turn on debug logging
  $DEBUG_ON=1;
  use warnings;
  TagTools::printLog("Run $0") if($DEBUG_ON);
  open STDERR,'>>',$DEBUG_FILE;
  $SIG{__WARN__} = sub {warn print (localtime()." -- ".@_)};
#  $SIG{__DIE__}  = sub {die  print (localtime()." -- ".@_)};
  $file = $ARGV[1];
  $arg_num = 1;
}
if ($file=~m/^\-/) {	# ignore unknown option, but log event if necessary
 TagTools::printLog("$0: Ignoring unknown option '$file.'") if($DEBUG_ON);
}
displayHelp() if(!defined($file) || ($file eq ""));


## supress warnings and stderr output if debug logging is disabled:
open STDERR,'>','/dev/null' if (!$DEBUG_ON);


## Check for cookie file:
if (-r $COOKIE_FILE){
     eval "require \"$COOKIE_FILE\" ";
     warn $@ if $@;
} else {
    print "$COOKIE_FILE cannot be read, does it exist?";
    TagTools::printLog "$COOKIE_FILE cannot be read, does it exist?" if($DEBUG_ON);
}


my $f = Audio::TagLib::FileRef->new($file);

## skip invalid files - otherwise we won't be able to display audio properties in the dialog:
while ( ((!defined($f->file())) || (!$f->file()->isValid())) && ($file ne "")){
    $arg_num++;
    $file = $ARGV[$arg_num];
    last if($file eq "");
    $f = Audio::TagLib::FileRef->new($file);
}
if ($file eq ""){
    TagTools::printLog("$0: no valid audio file selected, aborting.") if($DEBUG_ON);
    print("No valid audio file selected, aborting.\n");
    exit;
}


## read tech info, current dir and short filename
($audio_length, $audio_bitrate, $audio_sample, $backtitle, $short_filename) = 
    @{TagTools::getFileInfo($f)};


## UI::Dialog::Backend::CDialog::form() cannot print the dollar char correctly,
## do for now we'll just replace it with a ?
 foreach $cookie_field (($batchtag_last_artist, $batchtag_last_album, $batchtag_last_format, 
			 $batchtag_last_year, $batchtag_last_charset)) {
    $cookie_field =~ s/\$/\?/g;
 }


###################     INIT THE DIALOG        ###########################################
  my $d = new UI::Dialog::Backend::CDialog ( backtitle => "$backtitle",
                                             title => "Batch tag edit" );

  my @data = $d->form( text => "$short_filename\n Length: $audio_length\n Bitrate: $audio_bitrate kb/sec,  $audio_sample Hz",
		       literal => 1,
		       height => 18,
		       width => 51,
		       formheight => 8,
                       list => [ [ 'Artist:',  			  1, 1 ], [ "$batchtag_last_artist",  1, 10, 35, 0 ],
                                 [ 'Album:',   			  2, 1 ], [ "$batchtag_last_album",   2, 10, 35, 0 ],
                                 [ 'Year:',    			  3, 1 ], [ "$batchtag_last_year",    3, 10, 35, 0 ],
                                 [ 'Genre:',   			  4, 1 ], [ "", 		      4, 10, 35, 0 ],
                                 [ 'Comment:', 			  5, 1 ], [ "", 		      5, 10, 35, 0 ],
                                 [ 'Extract tags from filename:', 6, 1 ], [ "$batchtag_last_format",  7, 1,  44, 0 ],
                                 [ 'Charset:', 			  8, 1 ], [ "$batchtag_last_charset", 8, 10, 25, 0 ] ]
                    );

 exit if (!@data or (scalar @data == 1));


  # correct the spaces bug from CDialog - remove traling spaces:
#  @data = @{TagTools::removeTrailingSpaces(\@data)};
# ($artist, $album, $year, $genre, $comment, $format, $charset) = @data;
 ($artist, $album, $year, $genre, $comment, $format, $charset) = @{TagTools::removeTrailingSpaces(\@data)};


  $not_all_fields_empty=$artist.$album.$year.$genre.$comment;


$charset = TagTools::initCharset($charset);
$recode_option = ($charset ne $DEFAULT_CHARSET) ? "-c $charset" : "";

 ## store recoded tags:
  ($rec_artist,$rec_album,$rec_year,$rec_comment,$rec_genre) = ($artist,$album,$year,$comment,$genre); 
  if ($charset ne $DEFAULT_CHARSET) {
    foreach $rec_field (($rec_artist,$rec_album,$rec_year,$rec_comment,$rec_genre)) {
      Encode::from_to($rec_field,"$DEFAULT_CHARSET","$charset");
    }
  }


$format =~ s/^\s+//;
$format =~ s/\s+$//;


 $fname2tag_command = "fname2tag -f \"$format\" $recode_option ";

foreach $file (@ARGV) {
    ## escape special characters
#    $file=~s/([\@\$\%\'\"])/\\\1/g;

    next if($file=~m/^-\w/);

    print "processing \"$file\"";

    ## run fname2tag if format specified
    if ($format ne ""){
        print ".";
        `$fname2tag_command \"$file\"`;
    }

    # Then, update individual tags:
      print ".";

     $f = Audio::TagLib::FileRef->new($file);
      $f->tag()->setArtist  ( Audio::TagLib::String->new( $rec_artist  )) if ($artist  ne "");
      $f->tag()->setAlbum   ( Audio::TagLib::String->new( $rec_album   )) if ($album   ne "");
      $f->tag()->setComment ( Audio::TagLib::String->new( $rec_comment )) if ($comment ne "");
      $f->tag()->setGenre   ( Audio::TagLib::String->new( $rec_genre   )) if ($genre   ne "");
      $f->tag()->setYear    ( $rec_year ) if ($year ne "");
     $f->save() if($not_all_fields_empty ne "");

      print "   done\n";
}


# Finally, update the settings in the cookie file:
TagTools::updateCookieFile("batchtag_last_format=$format",
		 "batchtag_last_charset=$charset",
		 "batchtag_last_artist=$artist",
		 "batchtag_last_album=$album",
		 "batchtag_last_year=$year");

